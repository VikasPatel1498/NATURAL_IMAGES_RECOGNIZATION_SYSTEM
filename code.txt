from google.colab import drive
drive.mount('/content/drive/',force_remount=True)
import os 
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np
import io
import pandas as pd
#import numpy as np 
from keras.preprocessing.image import  ImageDataGenerator
from sklearn.metrics import confusion_matrix
import math
PATH = os.getcwd()
train_data_dir=PATH+'/drive/My Drive/project/training'
batchsize =10
epochs =10
classes=['airplane-[1]','car-[2]','cat-[3]','dog-[4]','flower-[5]','fruit-[6]','motorbike-[7]','person-[8]'];

train_batches=ImageDataGenerator().flow_from_directory(train_data_dir,target_size=(100,100),classes=['airplane','car','cat','dog','flower','fruit','motorbike','person'],batch_size=2500)
validation_data_dir=PATH+'/drive/My Drive/project/validation'

validation_batches=ImageDataGenerator().flow_from_directory(validation_data_dir,target_size=(100,100),classes=['airplane','car','cat','dog','flower','fruit','motorbike','person'],batch_size=2500)

train=iter(train_batches)
imgs=next(train)
x=type(imgs)
print(x)

imgs,labels=next(train_batches)




#print(labels)
#print(labels.shape)
#print(imgs.shape)

l=[]
l.append(labels)

t=[]
 
for k in range(len(l[0])):
  for i in l[0][[k]]:
    for j in range(len(i)):
      x=i[j]
    
      if(int(i[j])==1):
        x1=j
        t.append([x1])
  
  
fig, axes1 = plt.subplots(2,2,figsize=(9,9))

for j in range(2):
      for k in range(2):
          i = np.random.choice(range(len(imgs)))
          title = classes[t[i:i+1][0][0]]
          axes1[j][k].title.set_text(title)
          #axes1[j][k].set_axis_off()
          axes1[j][k].imshow((imgs[i:i+1][0]).astype(np.uint8))



test_data_dir=PATH+'/drive/My Drive/project/testing'

test_batches=ImageDataGenerator().flow_from_directory(test_data_dir,target_size=(100,100),classes=['airplane','car','cat','dog','flower','fruit','motorbike','person'],batch_size=2500)
x_test,test=next(test_batches)

print(x_test.shape)
print(test.shape)
#print(test)



test1=[]
test1.append(test)
#print(l)
y_test=[]
y_test1=[]
  #print(len(l[0]))
for k in range(len(test1[0])):
  #print(k)
  for i in test1[0][[k]]:
    #print(len(i))
    
    for j in range(len(i)):
      #print(j)
      
      #print(int(i[j]))
      x=i[j]
      #print(x)
      #print(int(x))
      if(int(i[j])==1):
        x1=j
      
        #print(x1)
        y_test.append([x1])
        

print(y_test)


import keras.models
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Dense, Activation, Flatten

model=Sequential([Conv2D(32, kernel_size=(8, 8), activation='relu', input_shape=(100, 100, 3)),
                  Flatten(),
                  Dense(8,activation='softmax'),
                  ])



from keras.optimizers import Adam

model.compile(Adam(lr=.0001),loss='categorical_crossentropy',metrics=['accuracy'])



model.fit_generator(train_batches,steps_per_epoch=4,validation_data=validation_batches,validation_steps=4,epochs=10,verbose=2)

